// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projects.Domain;

namespace Projects.Domain.Migrations
{
    [DbContext(typeof(ProjectsContext))]
    [Migration("20200111164410_Modificari4")]
    partial class Modificari4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Projects.Domain.Models.Invitation", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollaboratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvitationType")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId", "CollaboratorId", "OwnerId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Projects.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Projects.Domain.Models.ProjectTechnology", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TechnologieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "TechnologieId");

                    b.HasIndex("TechnologieId");

                    b.ToTable("ProjectTechnologies");
                });

            modelBuilder.Entity("Projects.Domain.Models.ProjectUser", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "UserId");

                    b.ToTable("ProjectUsers");
                });

            modelBuilder.Entity("Projects.Domain.Models.Technology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af89ceb0-8d02-40e8-983a-a5b225ed47a2"),
                            Name = "Java"
                        },
                        new
                        {
                            Id = new Guid("6f7c9d36-0b50-43b7-a03b-ccf643f7a484"),
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("6f69e9f9-5117-4552-8087-f3a1693d4029"),
                            Name = ".Net"
                        },
                        new
                        {
                            Id = new Guid("52fe3080-847f-4f8e-bb0c-60564fdaac2d"),
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("47028ec5-3253-46fa-9b75-23371acbf615"),
                            Name = "Unity"
                        },
                        new
                        {
                            Id = new Guid("0af66c94-733a-4040-8e2e-6fab9fe2e8d4"),
                            Name = "Node.js"
                        },
                        new
                        {
                            Id = new Guid("87f9a6b1-9d9d-4e2f-b044-b57618d6abe6"),
                            Name = "Angular"
                        },
                        new
                        {
                            Id = new Guid("855eb54e-3086-458a-a774-982d996b3cdb"),
                            Name = "React"
                        },
                        new
                        {
                            Id = new Guid("97553466-5f5d-49dd-9f21-6441c1032c1f"),
                            Name = "Vue"
                        },
                        new
                        {
                            Id = new Guid("dded65ad-5c19-4c24-b392-5a06e72b05e7"),
                            Name = "Express"
                        },
                        new
                        {
                            Id = new Guid("3704c7b0-7951-48e3-a485-47c2a8fd6e48"),
                            Name = "Swift"
                        },
                        new
                        {
                            Id = new Guid("24d9dc8a-f1b6-4063-9b39-ff653c26eda4"),
                            Name = "MongoDb"
                        },
                        new
                        {
                            Id = new Guid("0b9f08b4-7c81-4f66-b84b-11a3ade103d8"),
                            Name = "C++"
                        },
                        new
                        {
                            Id = new Guid("c2464fc1-87b7-4b38-8b69-a6e69f1c758a"),
                            Name = "Python"
                        },
                        new
                        {
                            Id = new Guid("a5f5da61-2241-4656-9007-3fbb401ad9a4"),
                            Name = "C"
                        });
                });

            modelBuilder.Entity("Projects.Domain.Models.Invitation", b =>
                {
                    b.HasOne("Projects.Domain.Models.Project", "Project")
                        .WithMany("Invitations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Projects.Domain.Models.ProjectTechnology", b =>
                {
                    b.HasOne("Projects.Domain.Models.Project", "Project")
                        .WithMany("ProjectTechnologies")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projects.Domain.Models.Technology", "Technologie")
                        .WithMany("ProjectTechnologies")
                        .HasForeignKey("TechnologieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Projects.Domain.Models.ProjectUser", b =>
                {
                    b.HasOne("Projects.Domain.Models.Project", "Project")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
